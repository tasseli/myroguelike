planning

Fix / rewrite:
- remove prints
- work best prints into messages
- adding messages to bottom UI
    - simplify
    - pick a good function setup
- do I need to have both class parameters and initiated parameters?
- do I need to pass coordinates as a list instead of tuple, everywhere?
- modularize rendering logic
    - draw smarter than one char at a time

Add features:
- create a better message system
- write a superclass to creatures
- end game in a better fashion using bottom UI messages
    - create end state that takes no commands, other than exiting game
- consider game manager class
- add changing moods at least once destination becomes ineligible
- plan game ending
- adding knowledge, first levels
- adding discussion
- adding key handling for fun commands like look, say, tickle, hit
- adding help keys
- plan map logic, say, for handling items etc
- load map from file
- map generation
- agent knowledge
- agent communication (language, shrieks, nonverbal)
- agent faction
- faction knowledge - culture
- faction communication
- cultures for groups?
- languages based on INT
- bartering based on language / abilities
- "Look at ..." "It doesn't make sense to you" / "you see another Dwarven healer with a spellbook of second circle on their backpack, probably"It would be very cool if there'd be stat potions lying around, and raising a stat did show, but everything else changed based on the stats.

Recap:
 pygame.display.set_mode()  can be used to create the grid
 pygame.Surface             represents an off-screen image I can draw before blitting it to display. Frames, as it were.
 pygame.event.get()         capture inputs. Most commands use up a turn, some don't.
 pygame.font.Font()         creating font object to render text
 font.render()              converting ASCII to images
 pygame.time.Clock()        control speed of the game. Handling frame rate, checking for input.
 screen.blit()              Draw surface
 pygame.display.update()    Updates the contents of the display after drawing everything. Update the screen after action or turn.
 
